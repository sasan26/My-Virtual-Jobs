{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;QAmBgB;QAsBA;QAuBA;QAiBA;QAcA;;;;;;;;;;;;;;;;;;AAtFhB,OAAO,OAAP,GAAiB,2BAAsB;AACrC,kBADqC,EAC5B,gBAD4B,EACnB,UADmB,EACb,cADa,EACL,cADK;CAAtB,CAAjB;;AAUO,SAAS,OAAT,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B;AAEnC,MAAI,OAAO,KAAP,KAAiB,QAAjB,EAA2B,QAAQ,OAAO,KAAP,CAAR,CAA/B,KACK,IAAI,QAAO,qDAAP,KAAiB,QAAjB,EAA2B,QAAQ,KAAK,SAAL,CAAe,KAAf,CAAR,CAA/B,KACA,IAAI,OAAO,KAAP,KAAiB,QAAjB,EAA2B,OAA/B;;AAEL,QAAM,OAAO,QAAQ,GAAR,CAAY,cAAZ,CANsB;AAOnC,MAAI,CAAC,GAAD,EAAM,MAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN,CAAV;;AAEA,MAAI,SAAS,iBAAO,YAAP,CAAoB,aAApB,EAAmC,GAAnC,CAAT,CAT+B;AAUnC,MAAI,YAAY,OAAO,MAAP,CAAc,KAAd,EAAqB,MAArB,EAA6B,KAA7B,CAAZ,CAV+B;AAWnC,eAAa,OAAO,KAAP,CAAa,KAAb,CAAb,CAXmC;;AAanC,SAAO,SAAP,CAbmC;CAA9B;;AAsBA,SAAS,OAAT,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B;AACnC,MAAI,OAAO,KAAP,KAAiB,QAAjB,EAA2B,OAA/B;;AAEA,QAAM,OAAO,QAAQ,GAAR,CAAY,cAAZ,CAHsB;;AAKnC,MAAI,WAAW,iBAAO,cAAP,CAAsB,aAAtB,EAAqC,GAArC,CAAX,CAL+B;AAMnC,MAAI,YAAY,SAAS,MAAT,CAAgB,KAAhB,EAAuB,KAAvB,EAA8B,MAA9B,CAAZ,CAN+B;AAOnC,eAAa,SAAS,KAAT,CAAe,MAAf,CAAb,CAPmC;;AASnC,MAAI,UAAU,OAAV,CAAkB,GAAlB,MAA2B,CAA3B,EAA8B;AAChC,gBAAY,KAAK,KAAL,CAAW,SAAX,CAAZ,CADgC;GAAlC;;AAIA,SAAO,SAAP,CAbmC;CAA9B;;AAuBA,SAAS,IAAT,CAAe,KAAf,EAAoC;MAAd,gEAAU,kBAAI;;AACzC,UAAQ,IAAR,GAAe,QAAQ,IAAR,IAAgB,SAAhB,CAD0B;AAEzC,UAAQ,SAAR,GAAoB,QAAQ,SAAR,IAAqB,QAArB,CAFqB;;AAIzC,MAAI,QAAQ,IAAR,EAAc,SAAS,QAAQ,IAAR,CAA3B;;AAEA,SAAO,iBAAO,UAAP,CAAkB,QAAQ,SAAR,CAAlB,CACJ,MADI,CACG,KADH,EAEJ,MAFI,CAEG,KAFH,CAAP,CANyC;CAApC;;AAiBA,SAAS,MAAT,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B;AACnC,MAAI,IAAJ,EAAU;AACR,WAAO,yBAAG,mBAAS,OAAT,CAAH,CAAqB,KAArB,EAA4B,IAA5B,CAAP,CADQ;GAAV,MAEO;AACL,WAAO,yBAAG,mBAAS,OAAT,CAAH,CAAqB,EAArB,EACJ,IADI,CACC;aAAQ,yBAAG,mBAAS,IAAT,CAAH,CAAkB,KAAlB,EAAyB,IAAzB;KAAR,CADR,CADK;GAFP;CADK;;AAcA,SAAS,MAAT,GAA4B;MAAX,6DAAO,kBAAI;;AACjC,MAAI,SAAS,CAAT,EAAY;AACd,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN,CADc;GAAhB;;AAIA,MAAI,OAAO,CAAP,KAAa,CAAb,EAAgB;AAClB,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN,CADkB;GAApB;;AAIA,SAAO,yBAAY,OAAO,CAAP,CAAZ,CAAsB,QAAtB,CAA+B,KAA/B,CAAP,CATiC;CAA5B","file":"index.js","sourcesContent":["/**\n * dependencies\n */\n\nimport 'babel-polyfill'\nimport crypto, { randomBytes } from 'crypto'\nimport bcryptjs from 'bcryptjs'\nimport dn from 'denodeify'\n\nmodule.exports = Object.assign(crypto, {\n  encrypt, decrypt, hash, bcrypt, random\n})\n\n/**\n * encrypt a value using AES256-CTR\n * @param value (string) the string to encrypt\n * @param key (string, optional) the private key to use\n */\n\nexport function encrypt (value, key) {\n  /* only allow strings and numbers */\n  if (typeof value === 'number') value = String(value)\n  else if (typeof value === 'object') value = JSON.stringify(value)\n  else if (typeof value !== 'string') return\n\n  key = key || process.env.ENCRYPTION_KEY\n  if (!key) throw new Error('you need an encryption key!')\n\n  let cipher = crypto.createCipher('aes-256-ctr', key)\n  let encrypted = cipher.update(value, 'utf8', 'hex')\n  encrypted += cipher.final('hex')\n\n  return encrypted\n}\n\n/**\n * decrypt a value using AES256-CTR\n * @param value (string) the encrypted string to decrypt\n * @param key (string, optional) the private key to use\n */\n\nexport function decrypt (value, key) {\n  if (typeof value !== 'string') return\n\n  key = key || process.env.ENCRYPTION_KEY\n\n  let decipher = crypto.createDecipher('aes-256-ctr', key)\n  let decrypted = decipher.update(value, 'hex', 'utf8')\n  decrypted += decipher.final('utf8')\n\n  if (decrypted.indexOf('{') === 0) {\n    decrypted = JSON.parse(decrypted)\n  }\n\n  return decrypted\n}\n\n/**\n * create a hash\n * @param value (string) the value to hash\n * @param salt (string) the salt to use when hashing\n * @param algorithm (string, optional) the hashing algorithm to use\n */\n\nexport function hash (value, options = {}) {\n  options.salt = options.salt || undefined\n  options.algorithm = options.algorithm || 'sha256'\n\n  if (options.salt) value += options.salt\n\n  return crypto.createHash(options.algorithm)\n    .update(value)\n    .digest('hex')\n}\n\n/**\n * for hashing to bcrypt, and comparing to a hash.\n * @param value (string) the value to hash\n * @param hash (string, optional) if provided, the hash to compare\n */\n\nexport function bcrypt (value, hash) {\n  if (hash) {\n    return dn(bcryptjs.compare)(value, hash)\n  } else {\n    return dn(bcryptjs.genSalt)(10)\n      .then(salt => dn(bcryptjs.hash)(value, salt))\n  }\n}\n\n/**\n * creates a random hex value\n * @param size (int, optional) the size of the returned string\n */\n\nexport function random (size = 32) {\n  if (size === 0) {\n    throw new Error('zero-length randomHex is useless')\n  }\n\n  if (size % 2 !== 0) {\n    throw new Error('randomHex size must be even')\n  }\n\n  return randomBytes(size / 2).toString('hex')\n}\n"]}